---
- name: Ensure report files do not already exist
  ansible.windows.win_file:
    path: '{{ openscap_install_dir }}\{{ item }}'
    state: absent
  loop:
    - report.html
    - report.xml

- name: Ensure the system is scanned
  ansible.windows.win_shell: |
    oscap xccdf eval \
      --report report.html \
      --results report.xml \
      --profile xccdf_mil.disa.stig_profile_Disable_Slow_Rules {{ scap_benchmark_content_file_name | replace(".zip", ".xml") }}
  args:
    chdir: '{{ openscap_install_dir }}\'
    creates: '{{ openscap_install_dir }}\report.xml'
  register: openscap_scan
  failed_when: openscap_scan.rc > 2
  no_log: true

- name: Ensure results are registered
  ansible.builtin.slurp:
    src: '{{ openscap_install_dir }}\report.xml'
  register: scap_report_file

- name: Ensure facts are set from report
  ansible.builtin.set_fact:
    openscap_scan_results:
      benchmark_id: "{{ test_result['benchmark']['@id'] }}"
      total_rules_count: "{{ rule_result | length }}"
      score: "{{ test_result['score']['#text'] }}%"
      rule_results_count:
        notchecked: "{{ rule_result | json_query('@[?result==`notchecked`]') | length }}"
        fixed: "{{ rule_result | json_query('@[?result==`fixed`]') | length }}"
        error: "{{ rule_result | json_query('@[?result==`error`]') | length }}"
        notapplicable: "{{ rule_result | json_query('@[?result==`notapplicable`]') | length }}"
        informational: "{{ rule_result | json_query('@[?result==`informational`]') | length }}"
        unknown: "{{ rule_result | json_query('@[?result==`unknown`]') | length }}"
        fail: "{{ rule_result | json_query('@[?result==`fail`]') | length }}"
        pass: "{{ rule_result | json_query('@[?result==`pass`]') | length }}"
      severity_of_failed_rules_count:
        low: "{{ rule_result | json_query('@[?result==`fail`]') | selectattr('@severity', 'equalto', 'low') | list | length }}"
        medium: "{{ rule_result | json_query('@[?result==`fail`]') | selectattr('@severity', 'equalto', 'medium') | list | length }}"
        high: "{{ rule_result | json_query('@[?result==`fail`]') | selectattr('@severity', 'equalto', 'high') | list | length }}"
      failed_rules: "{{ rule_result | json_query('@[?result==`fail`]') }}"
    cacheable: true
  vars:
    report_from_xml: "{{ scap_report_file['content'] | b64decode | ansible.utils.from_xml | replace('{http://checklists.nist.gov/xccdf/1.2}','') }}"
    test_result: "{{ report_from_xml['Benchmark']['TestResult'] }}"
    rule_result: "{{ test_result['rule-result'] }}"

- ansible.builtin.debug:
    var: openscap_scan_results

# Set security_compliance based on organization conditions
# in the real world you would probably have multiple checks
- name: Ensure the security compliance status is set
  set_fact:
    security_compliance:
      status: "{{ true if ((openscap_scan_results.severity_of_failed_rules_count.high|int) < 10) else false }}"
      type: "{{ scap_content_type }}"
    cacheable: true

- ansible.builtin.debug:
    msg: "Compliance Status: {{ security_compliance.status }}"
